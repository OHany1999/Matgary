Domain Folder
------------

1- entities


import 'package:equatable/equatable.dart';

  class TestEntity extends Equatable{
  final bool? status;
  final Null message;
  final DataEntity? data;

  TestEntity({required this.status,required this.message,required this.data});

  @override
  // TODO: implement props
  List<Object?> get props => [status,message,data];

}




class DataEntity extends Equatable{
    final  List<BannersEntity>? banners;
    final List<ProductsEntity>? products;
    final String? ad;

    DataEntity({required this.banners, required this.products, required this.ad});


  @override
  // TODO: implement props
  List<Object?> get props => [banners, products,ad];

}


class BannersEntity extends Equatable{
  final int? id;
  final String? image;
  final Null category;
  final Null product;

  BannersEntity({required this.id, required this.image, required this.category, required this.product});


  @override
  // TODO: implement props
  List<Object?> get props => [id,image,category,product];

}

class ProductsEntity extends Equatable{
  final int? id;
  final double? price;
  final double? oldPrice;
  final int? discount;
  final String? image;
  final String? name;
  final String? description;
  final List<dynamic>? images;
  final bool? inFavorites;
  final bool? inCart;

  ProductsEntity({required this.id, required this.price, required this.oldPrice, required this.discount, required this.image, required this.name, required this.description, required this.images, required this.inFavorites, required this.inCart});


  @override
  // TODO: implement props
  List<Object?> get props => [id,price,oldPrice,discount,image,name,description,images,inFavorites,inCart];
}
-------------------------------------------------------------



2- base repository



abstract class BaseTestRepository{
  Future<Either<Failure,TestEntity>> getTestData(TestParameters Parameters or empty);
}

--------------------------------------------------------------


3- useCase

class TestUseCase extends BaseUseCase<TestEntity,NoParameters or TestParameters>{
  final BaseTestRepository baseTestRepository;
  TestUseCase(this.baseTestRepository);

  @override
  Future<Either<Failure, TestEntity>> call(TestParameters Parameters or NoParameters noParameters)async {
    return await baseTestRepository.getTestData(Parameters or empty);
  }
}


class TestParameters extends Equatable {
  final String email;
  final String password;

  const TestParameters({required this.email, required this.password});

  @override
  List<Object?> get props => [email, password];
}


-----------------------------------------------------------------------------------------------------------

Data Folder
------------

4-model



import 'dart:math';

import 'package:matgary/home/domain/entities/home_entity.dart';

class TestModel extends TestEntity {
  TestModel({
    required super.status,
    required super.message,
    required super.data,
  });

  factory TestModel.fromJson(Map<String, dynamic> json) => HomeModel(
        status: json['status'],
        message: json['message'],
        data: json['data'] != null ? DataModel.fromJson(json['data']) : null,
      );
}

class DataModel extends DataEntity {
  DataModel({
    required super.banners,
    required super.products,
    required super.ad,
  });

  factory DataModel.fromJson(Map<String, dynamic> json) => DataModel(
        banners: json['banners'] != null
            ? List<BannersModel>.from(json['banners']
                .map((element) => BannersModel.fromJson(element)))
            : null,
        products: json['products'] != null
            ? List<ProductsModel>.from(json['products']
                .map((element) => ProductsModel.fromJson(element)))
            : null,
        ad: json['ad'],
      );
}

class BannersModel extends BannersEntity {
  BannersModel({
    required super.id,
    required super.image,
    required super.category,
    required super.product,
  });

  factory BannersModel.fromJson(Map<String, dynamic> json) => BannersModel(
        id: json['id'],
        image: json['image'],
        category: json['category'],
        product: json['product'],
      );
}

class ProductsModel extends ProductsEntity {
  ProductsModel({
    required super.id,
    required super.price,
    required super.oldPrice,
    required super.discount,
    required super.image,
    required super.name,
    required super.description,
    required super.images,
    required super.inFavorites,
    required super.inCart,
  });

  factory ProductsModel.fromJson(Map<String, dynamic> json) => ProductsModel(
        id: json['id'],
        price: json['price'].toDouble(),
        oldPrice: json['old_price'].toDouble(),
        discount: json['discount'],
        image: json['image'],
        name: json['name'],
        description: json['description'],
        images: json['images'],
        inFavorites: json['in_favorites'],
        inCart: json['in_cart'],
      );
}


--------------------------------------------------------------------------------

5- repository



class TestRepository extends BaseTestRepository{
  final BaseTestRemoteDataSource baseTestRemoteDataSource;

  TestRepository(this.baseTestRemoteDataSource);

  @override
  Future<Either<Failure, TestEntity>> getTestData(TestParameters Parameters or Empty)async {
    try{
      final result = await baseTestRemoteDataSource.getTestData(Parameters or empty);
      return Right(result);
    }on Exception catch(error){
      return left(Failure(error.hashCode, error.toString()));
    }
  }
}



//catch(error){
//       return Left(ErrorHandler.handle(error).failure);
//     }
//   }

-------------------------------------------------------------

6- datasource


abstract class BaseTestRemoteDataSource {
  Future<TestModel> getTestData(TestParameters Parameters or empty);
}


class TestRemoteDataSource extends BaseTestRemoteDataSource {
  @override
  Future<TestModel> getTestData(TestParameters Parameters or empty) async {
  final AppPreferences _appPref = sl<AppPreferences>();
    Dio dio = Dio();
    final response = await dio.post(
      ApiConstance.loginPath,
       options: Options(headers: {
          'lang':'ar',
          'Content-Type':'Content-Type',
          'Authorization':'${_appPref.getToken()}',
        }),
      data: {"email": parameters.email, "password": parameters.password},
    );
      return TestModel.fromJson(response.data);

  }
}
--------------------------------------------------------------------------

bloc Folder
___________

1- blocEvent

abstract class TestEvent extends Equatable{}

class GetTestEvent extends TestEvent{
  final int id;

  GetTestEvent({required this.id});


  @override
  // TODO: implement props
  List<Object?> get props => [id];
}

-------------------------------------------------------

2- blocState

enum TestRequestState{
  initial,
  loading,
  success,
  error,
}


class TestState extends Equatable {
  final TestEntity? testEntity;
  final TestRequestState testRequestState;
  final String testErrorMessage;



  const TestState({
    this.testEntity,
     this.testRequestState = TestRequestState.initial,
    this.testErrorMessage ='',
  });


  TestState copyWith({
    TestEntity? testEntity,
    TestRequestState? testRequestState,
    String? testErrorMessage,
  }) {
    return TestState(
      testEntity: testEntity ?? this.testEntity,
      testRequestState: testRequestState ?? this.testRequestState,
      testErrorMessage: testErrorMessage ?? this.testErrorMessage,
    );
  }

  @override
  // TODO: implement props
  List<Object?> get props => [testEntity,testRequestState,testErrorMessage];
}

--------------------------------------------------------

3- bloc

class TestBloc extends Bloc<TestEvent, TestState> {
  final TestUseCase testUseCase;

  TestBloc(this.testUseCase) : super(const TestState()) {
    on<GetTestEvent>(_getTest);
  }

  FutureOr<void> _getTest(GetTestEvent event, Emitter<TestState> emit) async {
    emit(state.copyWith(testRequestState: TestRequestState.loading));
    final result = await testUseCase(TestParameters(id: event.id));
    result.fold(
      (l) => emit(state.copyWith(testErrorMessage:l.message ,testRequestState: TestRequestState.error)),
      (r) => emit(state.copyWith(testEntity: r,testRequestState: TestRequestState.success)),
    );
  }
}

----------------------------------------------------
service locator
-----------------
  // bloc
  sl.registerFactory(() => TestBloc(sl()));


   /// USE CASES For test
    sl.registerLazySingleton(() => GetTestUseCase(sl()));
    /// Repository For test
    sl.registerLazySingleton<BaseTestRepository>(() => TestRepository(sl()));
    /// DATA SOURCE For test
    sl.registerLazySingleton<BaseTestRemoteDataSource>(() => TestRemoteDataSource());
